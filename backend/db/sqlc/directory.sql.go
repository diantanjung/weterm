// Code generated by sqlc. DO NOT EDIT.
// source: directory.sql

package db

import (
	"context"
)

const checkUserDir = `-- name: CheckUserDir :one
SELECT dir_id, name, user_id, created_at FROM directory
WHERE user_id = $1 AND name = $2
LIMIT 1
`

type CheckUserDirParams struct {
	UserID int64  `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) CheckUserDir(ctx context.Context, arg CheckUserDirParams) (Directory, error) {
	row := q.db.QueryRowContext(ctx, checkUserDir, arg.UserID, arg.Name)
	var i Directory
	err := row.Scan(
		&i.DirID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const createUserDir = `-- name: CreateUserDir :one
INSERT INTO directory (
  name,
  user_id
) VALUES (
  $1, $2
) RETURNING dir_id, name, user_id, created_at
`

type CreateUserDirParams struct {
	Name   string `json:"name"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) CreateUserDir(ctx context.Context, arg CreateUserDirParams) (Directory, error) {
	row := q.db.QueryRowContext(ctx, createUserDir, arg.Name, arg.UserID)
	var i Directory
	err := row.Scan(
		&i.DirID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserDir = `-- name: DeleteUserDir :exec
DELETE FROM directory
WHERE user_id = $1 AND name = $2
`

type DeleteUserDirParams struct {
	UserID int64  `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) DeleteUserDir(ctx context.Context, arg DeleteUserDirParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserDir, arg.UserID, arg.Name)
	return err
}

const getUserDirs = `-- name: GetUserDirs :many
SELECT dir_id, name, user_id, created_at FROM directory
WHERE user_id = $1
ORDER BY dir_id
`

func (q *Queries) GetUserDirs(ctx context.Context, userID int64) ([]Directory, error) {
	rows, err := q.db.QueryContext(ctx, getUserDirs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Directory{}
	for rows.Next() {
		var i Directory
		if err := rows.Scan(
			&i.DirID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
